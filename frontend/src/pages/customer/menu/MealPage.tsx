import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Card, Button } from "flowbite-react";
import { getAllMenuItems } from "../../../services/product/fetchProduct";
import type { Product } from "../../../services/product/fetchProduct";
import { useNotification } from "../../../components/Notification/NotificationContext";
import ProductCard from "../../../components/card/ProductCard";
import SearchBar from "../../../components/search_filter/SearchBar";
import SortFilter from "../../../components/search_filter/SortFilter";
import Pagination from "../../../components/common/PaginationClient";

/**
 * ü•ò MealPage Component
 * Hi·ªÉn th·ªã danh s√°ch c√°c m√≥n ƒÉn theo danh m·ª•c (categorySlug),
 * h·ªó tr·ª£ t√¨m ki·∫øm, s·∫Øp x·∫øp, ph√¢n trang v√† hi·ªáu ·ª©ng loading.
 */
const MealPage: React.FC = () => {
  /** L·∫•y slug danh m·ª•c t·ª´ URL (v√≠ d·ª•: /menu/pizza -> categorySlug = "pizza") */
  const { categorySlug } = useParams<{ categorySlug: string }>();

  /** Danh s√°ch s·∫£n ph·∫©m hi·ªán t·∫°i tr√™n trang */
  const [products, setProducts] = useState<Product[]>([]);

  /** T·ªïng s·ªë trang c√≥ s·∫µn t·ª´ API */
  const [totalPages, setTotalPages] = useState(0);

  /** Trang hi·ªán t·∫°i (0-based index) */
  const [currentPage, setCurrentPage] = useState(0);

  /** S·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n m·ªói trang */
  const [pageSize] = useState(6);

  /** T·ª´ kho√° t√¨m ki·∫øm hi·ªán t·∫°i */
  const [search, setSearch] = useState("");

  /** Ki·ªÉu s·∫Øp x·∫øp hi·ªán t·∫°i ("popular" | "price" | "newest" ...) */
  const [sort, setSort] = useState("popular");

  /** Tr·∫°ng th√°i loading (ƒëang t·∫£i d·ªØ li·ªáu) */
  const [loading, setLoading] = useState(true);

  /** Context th√¥ng b√°o to√†n c·ª•c (hi·ªÉn th·ªã alert / toast) */
  const { notify } = useNotification();

  /**
   * useEffect #1 ‚Äî G·ªçi API ƒë·ªÉ t·∫£i danh s√°ch m√≥n ƒÉn
   * Ch·∫°y l·∫°i m·ªói khi thay ƒë·ªïi categorySlug, currentPage, search ho·∫∑c sort
   */
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      try {
        // G·ªçi API l·∫•y d·ªØ li·ªáu trang hi·ªán t·∫°i
        const pageData = await getAllMenuItems(
          currentPage,
          pageSize,
          search,
          sort,
          categorySlug
        );

        let allProducts = pageData.content;

        // N·∫øu c√≥ categorySlug, ch·ªâ l·ªçc s·∫£n ph·∫©m thu·ªôc danh m·ª•c ƒë√≥
        if (categorySlug) {
          allProducts = allProducts.filter(
            (p: Product) => p.categorySlug === categorySlug
          );
        }

        // C·∫≠p nh·∫≠t state hi·ªÉn th·ªã
        setProducts(allProducts);
        setTotalPages(pageData.totalPages);
      } catch (error) {
        console.error("Error fetching menu items:", error);
        notify("error", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√≥n ƒÉn");
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [categorySlug, currentPage, search, sort]);

  /**
   * useEffect #2 ‚Äî Reset trang v·ªÅ 0 khi b·ªô l·ªçc thay ƒë·ªïi
   * Tr√°nh vi·ªác ng∆∞·ªùi d√πng ƒëang ·ªü trang cao, m√† k·∫øt qu·∫£ filter √≠t h∆°n
   */
  useEffect(() => {
    setCurrentPage(0);
  }, [search, sort, categorySlug]);

  /**
   * UI ph·∫ßn th√¢n trang
   * G·ªìm: ti√™u ƒë·ªÅ, b·ªô l·ªçc, danh s√°ch s·∫£n ph·∫©m, loading skeleton v√† pagination
   */
  return (
    <section className="min-h-screen bg-gradient-to-b from-amber-50 to-stone-100 py-12 px-4 sm:px-6 md:px-8">
      <div className="max-w-screen-xl mx-auto py-12 px-4 md:px-6">
        {/* --- Ti√™u ƒë·ªÅ danh m·ª•c --- */}
        <h2 className="text-4xl font-extrabold text-center text-amber-800 mb-4 border-b-2 border-stone-800 pb-2">
          {categorySlug
            ? categorySlug
                .replace("-", " ")
                .replace(/\b\w/g, (c) => c.toUpperCase())
            : "Danh s√°ch m√≥n ƒÉn"}
        </h2>

        <p className="text-amber-600 text-lg text-center mb-8">
          Kh√°m ph√° c√°c m√≥n ƒÉn ngon nh·∫•t trong danh m·ª•c
        </p>

        {/* --- B·ªô l·ªçc t√¨m ki·∫øm v√† s·∫Øp x·∫øp --- */}
        <Card className="mb-8 !bg-white !border-stone-400 shadow-sm">
          <div className="flex flex-col md:flex-row justify-between gap-4 p-4 items-center">
            {/* √î t√¨m ki·∫øm */}
            <div className="w-full md:w-auto flex-1">
              <SearchBar search={search} setSearch={setSearch} />
            </div>

            {/* B·ªô s·∫Øp x·∫øp */}
            <div className="mt-3 md:mt-0 md:ml-4 flex-none w-full md:w-auto">
              <SortFilter sort={sort} setSort={setSort} />
            </div>

            {/* N√∫t xem t·∫•t c·∫£ m√≥n ƒÉn */}
            <div className="mt-3 md:mt-0 md:ml-4 flex-none w-full md:w-auto">
              <Button
                color="warning"
                size="md"
                className="bg-amber-500 hover:bg-amber-600 text-white font-semibold shadow-lg transition-colors duration-200"
                href="/menu">
                Xem t·∫•t c·∫£
              </Button>
            </div>
          </div>
        </Card>

        <hr className="border-t-2 border-stone-800 mb-8" />

        {/* --- Danh s√°ch m√≥n ƒÉn (v·ªõi Skeleton overlay khi loading) --- */}
        <div className="relative min-h-[400px]">
          {/* L∆∞·ªõi s·∫£n ph·∫©m */}
          <div
            className={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 transition-opacity duration-300 ${
              loading ? "opacity-50 pointer-events-none" : "opacity-100"
            }`}>
            {products.length > 0 ? (
              products.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))
            ) : (
              <div className="text-gray-500 text-center col-span-full">
                Kh√¥ng c√≥ m√≥n ƒÉn n√†o trong danh m·ª•c n√†y
              </div>
            )}
          </div>

          {/* Hi·ªáu ·ª©ng skeleton loading (overlay) */}
          {loading && (
            <div className="absolute inset-0 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {Array.from({ length: pageSize }).map((_, idx) => (
                <div
                  key={idx}
                  className="h-72 bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 animate-pulse rounded-2xl"
                />
              ))}
            </div>
          )}
        </div>

        {/* --- Ph√¢n trang (Pagination component) --- */}
        {products.length > 0 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={(page) => setCurrentPage(page)}
          />
        )}
      </div>
    </section>
  );
};

export default MealPage;
